#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2015 France-IOI, MIT license
#
# http://opensource.org/licenses/MIT

##### START OF CONFIGURATION #####

### server.py configuration
# Path to the taskgrader executable
CFG_TASKGRADER = '/path/to/taskgrader.py'
# Path to the genJson tool from the taskgrader repository, typically
# CFG_GENJSON = 'taskgrader-repository/tools/genJson/genJson.py'
# Leave it to None to not regenerate defaultParams automatically
CFG_GENJSON = None
# Timeout for taskgrader execution
CFG_TIMEOUT = 900

# Path to the taskgrader auto-clean executable (included in taskgrader
# repository); None to not use it
CFG_CLEAN_SCRIPT = '/path/to/clean_cache.py'
# Path to the taskgrader auto-clean timestamp file
# (same than CFG_CLEAN_TIMESTAMP in taskgrader's config.py)
CFG_CLEAN_TIMESTAMP = '/tmp/.taskgrader-autoclean'
# Minimum free space (in Kb) before launching an evaluation
CFG_MIN_FREE = 128 * 1024

# Minimum memory before launching an evaluation
# Either a number in Kb, either a string 'X%' of total memory
CFG_MIN_MEM = 64 * 1024

# Log file (when not specified on command-line)
CFG_LOGFILE = None
# Log level, must be 'CRITICAL', 'ERROR', 'WARNING', 'INFO' or 'DEBUG'
CFG_LOGLEVEL = "WARNING"

# PID file for server-mode
CFG_SERVER_PIDFILE = '/path/to/pidfile'

# URLs to the graderqueue
CFG_GRADERQUEUE_URL  = '' # Base URL for the graderqueue
CFG_GRADERQUEUE_POLL = CFG_GRADERQUEUE_URL + 'poll.php' # URL to poll tasks from
CFG_GRADERQUEUE_SEND = CFG_GRADERQUEUE_URL + 'sendresults.php' # URL to send results
CFG_GRADERQUEUE_TEST = CFG_GRADERQUEUE_URL + 'test.php' # URL to test connection and authentication
CFG_GRADERQUEUE_TIMEOUT = 60 # Timeout for graderqueue connections

# Paths for tasks fetched from the graderqueue
CFG_GRADERQUEUE_ROOT = '' # rootPath to add to tasks
CFG_GRADERQUEUE_VARS = {} # Values for variables from the graderqueue

# Paths to restrict taskgrader access to
CFG_SERVER_RESTRICT  = []

# Interval (in seconds) between two executions of the IdleWorker
# Will determine how often updates to genJson or the repositories are checked
CFG_IDLEWORKER_INTERVAL = 10*60

# Local repositories (list of dicts)
# Example: [{
#    'path': "/path/to/localrepo",
#    'type': "svn",
#    'remote': "http://svn.example.com/repo"
#    }]
CFG_REPOSITORIES = []
# Common folders: list of paths (in repositories) which are to be always kept
# up-to-date; their associated repositories must be defined in CFG_REPOSITORIES
# Example: ["/path/to/localrepo/commontools", "/path/to/localrepo/commonlibs"]
CFG_COMMONFOLDERS = []
# SVN username and password
# If left empty, SVN will use saved credentials if they exist, or none
CFG_SVN_USER = ''
CFG_SVN_PASS = ''

# Wake-up parameters: IP and port to listen on
CFG_WAKEUP_IP   = '0.0.0.0'
CFG_WAKEUP_PORT = 20000

# Server certificate validation files
# CA to check the certificate against
CFG_SSL_CA = ''   # CA.crt file path
# Server hostname
CFG_SSL_HOSTNAME = None

# Hostname checker to use on server certificate (for urllib2_ssl)
# To check the hostname corresponds to the certificate,
# use urllib2_ssl.match_hostname, else put None
CFG_SSL_CHECKER = None

# Client token
CFG_TOKEN = None

# Client SSL files
CFG_SSL_KEY = ''  # local.key
CFG_SSL_CERT = '' # local.crt

CFG_ZIP_TARGET = '/path/for/zips/'
CFG_ZIP_REPOSITORY = 'http://example.com/files/zips/%s.zip'


##### END OF CONFIGURATION #####
